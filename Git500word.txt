GIT
Ben Judd
        "Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency." -https://git-scm.com/
    Git is, as stated in the video, is a piece of open-sourced software, that distributes, tracks and streamlines workflow for entire teams. These teams can be anywhere from 2 people to over 100, by using a central “hub”. With Git you can work locally, see differences in files, and commit changes, whereas GitKraken you can work in conjunction with Github to push files to Github after committing them. 
    To do this you first need to create a Github.com account that can link with your GitKraken software. Next you will need to download GitKraken. After downloading and opening this piece of software, you will need to open a repository, or in other words, a folder that will contain the files you will want to share with colleagues. This option usually will appear the first time opening GitKraken. You can either open, clone, or create a repository that will be saved in the folder you created. You will also need to have that same repository copied onto Github.com. The easiest way to do this is by creating a repository on Github and cloning it on Gitkraken. 
    Once this is done, create a file, any kind of file, and save it in your repository folder. Open up Gitkraken and it will show up on the ui. You will need to stage your file (prep it to be commit, or in other words save it store it in the Git dimension), you will then need to name your file that you will commit, then finally commit the file to store the file. Then at the top of the GitKraken UI there will be an icon to push the commit. This will bring it out onto the interwebs of earth and connect it with Github, and voila, both your online repository on Github.com and on Gitkraken are synced.  
    One of the fantastic features of Git is that you can go back to previous versions of what you are working on. You can commit different versions and if you messed up, you can see in git what and where you have messed up even if the files aren’t on your computer anymore. How awesome is that? Pretty neat stuff. I think 500 words is a lot because I’ve run out of words. But anyways, just seeing if you’re reading this. 
    Branching is another super duper capability of Git. Because of its streamlined, efficient nature, branching is quick and simple. There is an icon at the top of the UI that says branch, whatever repository you have selected will create a branch and will not affect the rest of the repository until it has been merged. So for example let’s say you are working on some super cool triggers for a game, and you don’t want it to affect other work you have done or you are experimenting on a code, but you don’t want to accidentally mess up how it was before. You can make a branch to go off experimenting and then when it does or does not work you can either merge the branch into your main work line, or leave it be or delete it. 